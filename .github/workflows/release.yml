# This will increase package.json version, create tags and release

name: Release

on:
  pull_request:
    branches:
      - main
    types:
      - closed
    paths-ignore:
      - '../../test/*'
      - '../ISSUE_TEMPLATE/*'
      - '../workflows/*'

permissions:
  contents: write
  pull-requests: read

jobs:
  # This job will check if the Pull request was merged into main branch
  check_valid_merge:
    name: Merge 'Pull request' to 'main' branch
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo The PR was merged.

  # This will validate to see if the labels contains 'none' which means that if 'none' was found the release will not happen
  check_valid_release:
    name: Validate release conditions
    needs: check_valid_merge
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'norelease') }}
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo The PR can continue to tags release creation.

  # This will start build of the project
  check_valid_build:
    name: Check build validity
    runs-on: ubuntu-latest
    needs: [check_valid_merge, check_valid_release]
    steps:
      - uses: actions/checkout@v4
      - run: npm install
      - run: npm run build

  # Steps for creation of the tags
  create_tags:
    name: Generate and push tags
    runs-on: ubuntu-latest
    needs: check_valid_build
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'

      # Determine the tag version by checking the labels provided in the Pull request
      - name: Determine Version Bump
        env:
          IS_PATCH_FOUND: ${{ contains(github.event.pull_request.labels.*.name, 'patch') }}
          IS_MINOR_FOUND: ${{ contains(github.event.pull_request.labels.*.name, 'minor') }}
          IS_MAJOR_FOUND: ${{ contains(github.event.pull_request.labels.*.name, 'major') }}
          IS_NO_RELEASE_FOUND: ${{ contains(github.event.pull_request.labels.*.name, 'norelease') }}
        run: |
          if [ "${IS_MINOR_FOUND}" == "true" ]; then
            echo "version=minor" >> $GITHUB_ENV
            echo "Version: minor"
          elif [ "${IS_PATCH_FOUND}" == "true" ]; then
            echo "version=patch" >> $GITHUB_ENV
            echo "Version: patch"
          elif [ "${IS_MAJOR_FOUND}" == "true" ]; then
            echo "version=major" >> $GITHUB_ENV
            echo "Version: major"
          else
            echo "version=none" >> $GITHUB_ENV
            echo "Version: No release"
          fi

      # Create the tags
      - name: Push tags
        uses: anothrNick/github-tag-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: false
          DEFAULT_BUMP: ${{ env.version }}
          BRANCH_HISTORY: full
          INITIAL_VERSION: 2.0.24

  # Create of the changelog file and commit the file to the main branch
  create_changelog:
    name: Generate changelog, commit the CHANGELOG.md file
    needs: create_tags
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Generate the changelog file based on the cliff.toml file
      - name: Generate a changelog
        uses: orhun/git-cliff-action@v3
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}

      - name: Display version
        run: echo ${{ steps.git-cliff.outputs.version }}

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          body: ${{ steps.git-cliff.outputs.content }}
          tag_name: ${{ steps.git-cliff.outputs.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          prerelease: false
          draft: false
          make_latest: true

      - name: Commit Changelog to new branch
        id: commit_changelog
        run: |
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          set +e
          git checkout -b update-changelog-${{ github.run_id }}
          git add CHANGELOG.md
          git commit -m "chore(doc): CHANGELOG.md updated"
          git push https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git update-changelog-${{ github.run_id }}

      - name: Create a Pull Request and push the commit to merge
        id: create_pr
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: chore(doc) CHANGELOG.md updated
          branch: update-changelog-${{ github.run_id }}
          base: main
          title: chore(doc) CHANGELOG.md updated
          body: 'Automated update of CHANGELOG.md'
          draft: false
          delete-branch: true

  # This will push the latest build of the project to npm
  publish-npm:
    name: Publish to npm publicly
    needs: create_changelog
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Setup .npmrc file to publish to npm
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: 'https://registry.npmjs.org'

      - run: npm ci
      - run: npm run build
      - run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.npm_token}}

{"version":3,"sources":["util/GenerateEnv.ts","PostInstall.ts"],"sourcesContent":["import { spawnSync } from 'child_process';\nimport { existsSync, appendFileSync, writeFileSync, mkdirSync, readFileSync } from 'fs';\nimport * as path from 'path';\nimport { json2ts } from 'json-ts';\nimport { parse as parseJsonc, ParseError } from 'jsonc-parser';\n\nexport class GenerateEnv {\n  private readonly dispatcherFolderPath: string;\n  private readonly envFilePath: string;\n  private readonly gitignoreFilePath: string;\n  private readonly packageJsonFilePath: string;\n  private readonly tsconfigFilePath: string;\n  private readonly clientCwd = process.env.INIT_CWD!;\n\n  constructor() {\n    this.dispatcherFolderPath = path.join(this.clientCwd, '@dispatcher');\n    this.envFilePath = path.join(this.dispatcherFolderPath, 'index.ts');\n    this.gitignoreFilePath = path.join(this.clientCwd, '.gitignore');\n    this.packageJsonFilePath = path.join(this.clientCwd, 'package.json');\n    this.tsconfigFilePath = path.join(this.clientCwd, 'tsconfig.json');\n  }\n\n  private prepareDispatcherFolder() {\n    this.createFolderIfAbsent(this.dispatcherFolderPath);\n    this.createFileIfAbsent(this.envFilePath);\n    this.createFileIfAbsent(this.gitignoreFilePath);\n  }\n\n  private createFolderIfAbsent(folderPath: string) {\n    if (!existsSync(folderPath)) {\n      mkdirSync(folderPath, { recursive: true });\n    }\n  }\n\n  private createFileIfAbsent(filePath: string, defaultContent = '') {\n    if (!existsSync(filePath)) {\n      writeFileSync(filePath, defaultContent);\n    }\n  }\n\n  private generateEnvFile() {\n    const cdsEnvOutput = this.executeShellCommand('cds', ['env', 'get']);\n    const typeDefinitions = this.generateTypeDefinitions(cdsEnvOutput);\n\n    writeFileSync(this.envFilePath, `// Type definitions for envConfig\\nexport ${typeDefinitions}`);\n  }\n\n  private compileEnvFile() {\n    this.executeShellCommand('npx tsc', [this.envFilePath, '--outDir', this.dispatcherFolderPath]);\n  }\n\n  private addToGitignore() {\n    this.appendLineIfAbsent(this.gitignoreFilePath, '@dispatcher');\n  }\n\n  private updatePackageJsonImports() {\n    if (existsSync(this.packageJsonFilePath)) {\n      const packageJson = JSON.parse(readFileSync(this.packageJsonFilePath, 'utf8'));\n      packageJson.imports = packageJson.imports || {};\n\n      if (!packageJson.imports['#dispatcher']) {\n        packageJson.imports['#dispatcher'] = './@dispatcher/index.js';\n        writeFileSync(this.packageJsonFilePath, JSON.stringify(packageJson, null, 2));\n      }\n    }\n  }\n\n  private updateTsconfigInclude() {\n    if (existsSync(this.tsconfigFilePath)) {\n      const tsconfigContent = readFileSync(this.tsconfigFilePath, 'utf8');\n      const errors: ParseError[] = [];\n\n      const tsconfig = parseJsonc(tsconfigContent, errors);\n\n      if (errors.length > 0) {\n        throw new Error('tsconfig.json contains comments or invalid JSON format, which is not allowed.');\n      }\n\n      // Ensure `include` property is present and update if needed\n      tsconfig.include = tsconfig.include || [];\n      if (!tsconfig.include.includes('./@dispatcher')) {\n        tsconfig.include.push('./@dispatcher');\n        writeFileSync(this.tsconfigFilePath, JSON.stringify(tsconfig, null, 2));\n      }\n    }\n  }\n\n  private appendLineIfAbsent(filePath: string, line: string) {\n    const content = readFileSync(filePath, 'utf8');\n    if (!content.includes(line)) {\n      appendFileSync(filePath, `\\n${line}\\n`);\n    }\n  }\n\n  private generateTypeDefinitions(jsonString: string): string {\n    return json2ts(jsonString, { rootName: 'CDS_ENV', prefix: '' });\n  }\n\n  private executeShellCommand(command: string, args: string[]) {\n    const result = spawnSync(command, args, { encoding: 'utf8', cwd: this.clientCwd });\n\n    if (result.stderr) {\n      console.error(result.stderr);\n    }\n\n    return result.stdout;\n  }\n\n  public run() {\n    try {\n      this.prepareDispatcherFolder();\n      this.generateEnvFile();\n      this.compileEnvFile();\n      this.addToGitignore();\n      this.updatePackageJsonImports();\n      this.updateTsconfigInclude();\n    } catch (error) {\n      console.error('Error during post-install steps:', error);\n      process.exit(1);\n    }\n  }\n}\n","import { GenerateEnv } from './util/GenerateEnv';\n\nclass PostInstall {\n  private readonly GenerateEnv: GenerateEnv;\n\n  public run() {\n    new GenerateEnv().run();\n    // add more postinstall utils if needed ...\n  }\n}\n\nnew PostInstall().run();\n"],"mappings":"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","names":["spawnSync","existsSync","appendFileSync","writeFileSync","mkdirSync","readFileSync","path","json2ts","parse","parseJsonc","GenerateEnv","dispatcherFolderPath","envFilePath","gitignoreFilePath","packageJsonFilePath","tsconfigFilePath","clientCwd","process","env","INIT_CWD","constructor","join","prepareDispatcherFolder","createFolderIfAbsent","createFileIfAbsent","folderPath","existsSync","mkdirSync","recursive","filePath","defaultContent","writeFileSync","generateEnvFile","cdsEnvOutput","executeShellCommand","typeDefinitions","generateTypeDefinitions","compileEnvFile","addToGitignore","appendLineIfAbsent","updatePackageJsonImports","packageJson","JSON","parse","readFileSync","imports","stringify","updateTsconfigInclude","tsconfigContent","errors","tsconfig","parseJsonc","length","Error","include","includes","push","line","content","appendFileSync","jsonString","json2ts","rootName","prefix","command","args","result","spawnSync","encoding","cwd","stderr","console","error","stdout","run","exit","PostInstall","GenerateEnv","run"]}
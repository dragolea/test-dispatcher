{"version":3,"sources":["/Users/dragolea/Developer/abs-projects/cds-ts-dispatcher/postinstall/PostInstall.js","util/GenerateEnv.ts","PostInstall.ts"],"names":["GenerateEnv","dispatcherFolderPath","envFilePath","gitignoreFilePath","packageJsonFilePath","tsconfigFilePath","clientCwd","process","env","INIT_CWD","constructor","join","prepareDispatcherFolder","createFolderIfAbsent","createFileIfAbsent","folderPath","existsSync","mkdirSync","recursive","filePath","defaultContent","writeFileSync","generateEnvFile","cdsEnvOutput","executeShellCommand","typeDefinitions","generateTypeDefinitions","appendLineIfAbsent","updatePackageJsonImports","packageJson","imports","updateTsconfigInclude","tsconfigContent","parseJsonc","length","tsconfig","include","push","readFileSync","includes","line","jsonString","command","spawnSync","result","stdout","compileEnvFile","addToGitignore","PostInstall","run"],"mappings":"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","file":"/Users/dragolea/Developer/abs-projects/cds-ts-dispatcher/postinstall/PostInstall.js","sourcesContent":[null,"import { spawnSync } from 'child_process';\nimport { existsSync, appendFileSync, writeFileSync, mkdirSync, readFileSync } from 'fs';\nimport * as path from 'path';\nimport { json2ts } from 'json-ts';\nimport { parse as parseJsonc, ParseError } from 'jsonc-parser';\n\nexport class GenerateEnv {\n  private readonly dispatcherFolderPath: string;\n  private readonly envFilePath: string;\n  private readonly gitignoreFilePath: string;\n  private readonly packageJsonFilePath: string;\n  private readonly tsconfigFilePath: string;\n  private readonly clientCwd = process.env.INIT_CWD!;\n\n  constructor() {\n    this.dispatcherFolderPath = path.join(this.clientCwd, '@dispatcher');\n    this.envFilePath = path.join(this.dispatcherFolderPath, 'index.ts');\n    this.gitignoreFilePath = path.join(this.clientCwd, '.gitignore');\n    this.packageJsonFilePath = path.join(this.clientCwd, 'package.json');\n    this.tsconfigFilePath = path.join(this.clientCwd, 'tsconfig.json');\n  }\n\n  private prepareDispatcherFolder() {\n    this.createFolderIfAbsent(this.dispatcherFolderPath);\n    this.createFileIfAbsent(this.envFilePath);\n    this.createFileIfAbsent(this.gitignoreFilePath);\n  }\n\n  private createFolderIfAbsent(folderPath: string) {\n    if (!existsSync(folderPath)) {\n      mkdirSync(folderPath, { recursive: true });\n    }\n  }\n\n  private createFileIfAbsent(filePath: string, defaultContent = '') {\n    if (!existsSync(filePath)) {\n      writeFileSync(filePath, defaultContent);\n    }\n  }\n\n  private generateEnvFile() {\n    const cdsEnvOutput = this.executeShellCommand('cds', ['env', 'get']);\n    const typeDefinitions = this.generateTypeDefinitions(cdsEnvOutput);\n\n    writeFileSync(this.envFilePath, `// Type definitions for envConfig\\nexport ${typeDefinitions}`);\n  }\n\n  private compileEnvFile() {\n    this.executeShellCommand('npx tsc', [this.envFilePath, '--outDir', this.dispatcherFolderPath]);\n  }\n\n  private addToGitignore() {\n    this.appendLineIfAbsent(this.gitignoreFilePath, '@dispatcher');\n  }\n\n  private updatePackageJsonImports() {\n    if (existsSync(this.packageJsonFilePath)) {\n      const packageJson = JSON.parse(readFileSync(this.packageJsonFilePath, 'utf8'));\n      packageJson.imports = packageJson.imports || {};\n\n      if (!packageJson.imports['#dispatcher']) {\n        packageJson.imports['#dispatcher'] = './@dispatcher/index.js';\n        writeFileSync(this.packageJsonFilePath, JSON.stringify(packageJson, null, 2));\n      }\n    }\n  }\n\n  private updateTsconfigInclude() {\n    if (existsSync(this.tsconfigFilePath)) {\n      const tsconfigContent = readFileSync(this.tsconfigFilePath, 'utf8');\n      const errors: ParseError[] = [];\n\n      const tsconfig = parseJsonc(tsconfigContent, errors);\n\n      if (errors.length > 0) {\n        throw new Error('tsconfig.json contains comments or invalid JSON format, which is not allowed.');\n      }\n\n      // Ensure `include` property is present and update if needed\n      tsconfig.include = tsconfig.include || [];\n      if (!tsconfig.include.includes('./@dispatcher')) {\n        tsconfig.include.push('./@dispatcher');\n        writeFileSync(this.tsconfigFilePath, JSON.stringify(tsconfig, null, 2));\n      }\n    }\n  }\n\n  private appendLineIfAbsent(filePath: string, line: string) {\n    const content = readFileSync(filePath, 'utf8');\n    if (!content.includes(line)) {\n      appendFileSync(filePath, `\\n${line}\\n`);\n    }\n  }\n\n  private generateTypeDefinitions(jsonString: string): string {\n    return json2ts(jsonString, { rootName: 'CDS_ENV', prefix: '' });\n  }\n\n  private executeShellCommand(command: string, args: string[]) {\n    const result = spawnSync(command, args, { encoding: 'utf8', cwd: this.clientCwd });\n\n    if (result.stderr) {\n      console.error(result.stderr);\n    }\n\n    return result.stdout;\n  }\n\n  public run() {\n    try {\n      this.prepareDispatcherFolder();\n      this.generateEnvFile();\n      this.compileEnvFile();\n      this.addToGitignore();\n      this.updatePackageJsonImports();\n      this.updateTsconfigInclude();\n    } catch (error) {\n      console.error('Error during post-install steps:', error);\n      process.exit(1);\n    }\n  }\n}\n","import { GenerateEnv } from './util/GenerateEnv';\n\nclass PostInstall {\n  private readonly GenerateEnv: GenerateEnv;\n\n  public run() {\n    new GenerateEnv().run();\n    // add more postinstall utils if needed ...\n  }\n}\n\nnew PostInstall().run();\n"]}